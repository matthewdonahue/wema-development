import re

from django.conf import settings
from django.urls import reverse
from django.shortcuts import redirect
from django.contrib.auth import logout

EXEMPT_URLS = [settings.LOGIN_URL]
if hasattr(settings, 'LOGIN_EXEMPT_URLS'):
     EXEMPT_URLS += [url for url in settings.LOGIN_EXEMPT_URLS]

# Urls that are not accesable to logged in users
NOT_FOR_MEMBERS = (
    reverse('members:login'),
    reverse('members:register'),
    reverse('members:reset_password')
)

class LoginRequiredMiddleware:

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        return response

    def process_view(self, request, view_func, view_args, view_kwargs):
        assert hasattr(request, 'user')
        path = request.path_info

        #redirects non-member users to the home page if trying to accesess member only urls.
        if path[0:len("/members/")]=="/members/":
            # Checks if the URL is exempt from authorization restrictions. The second half of the or statement is a 
            # workaround the <uidb64> and <token> generated by the reset-password email. Without it, the user will be
            # redirected to the login page.
            if path in EXEMPT_URLS or path[0:len("/members/reset-password/confirm/")]=="/members/reset-password/confirm/":
                url_is_exempt = True
            else:
                url_is_exempt = False
                
            #Redirects user based on authorization.
            if request.user.is_authenticated and url_is_exempt:
                if path in NOT_FOR_MEMBERS:
                    return redirect(settings.LOGIN_REDIRECT_URL)
                else:
                    return None
            elif request.user.is_authenticated or url_is_exempt:
                return None
            else:
                return redirect(settings.LOGIN_URL)

        else:
            return None